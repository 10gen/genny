# Example to show the different random int distributions. For
# documentation, see ../Values.md under randomint section

sample_size: &sample_size 1000

main:
  name: random
  database: random
  collection: random
  nodes:
    - type: drop
    - type: insert_many
      times: *sample_size
      # num should have average 50 and std dev. about 29.2
      doc: {distribution: uniform, num: {$randomint: {min: 0, max: 100}}}
    - type: insert_many
      times: *sample_size
      # num should have average 50 and std. dev about 5
      doc: {distribution: binomial, num: {$randomint: {distribution: binomial, t: 100, p: 0.5}}}
    - type: insert_many
      times: *sample_size
      # num should have average 50 and std. dev of about 10 
      doc: {distribution: negative_binomial, num: {$randomint: {distribution: negative_binomial, p: 0.5, k: 50}}}
    - type: insert_many
      times: *sample_size
      # num should have average of 50 and std. dev. of about 49.5
      doc: {distribution: geometric, num: {$randomint: {distribution: geometric, p: 0.02}}}
    - type: insert_many
      times: *sample_size
      # num shoud have average 50 and std. dev of about 7.07
      doc: {distribution: poisson, num: {$randomint: {distribution: poisson, mean: 50}}}


      # From here down is self check
    - type: set_variable
      target: CollectionName
      value: results
    - type: drop
      # this next line computes statistics on each of the generated sets of data
    - type: command
      command: {aggregate: "random", pipeline: [{$group: {_id: "$distribution", average: {$avg: "$num"}, min: {$min: "$num"}, max: {$max: "$num"}, stddev: {$stdDevPop: "$num"}}}, {$out: "results"}]}
    - type: count
      name: check_uniform
      filter: {_id: uniform, average: {$gte: 45, $lte: 55}, stddev: {$gte: 28, $lte: 31}}
      assertEquals: 1
    - type: count
      name: check_binomial
      filter: {_id: binomial, average: {$gte: 45, $lte: 55}, stddev: {$gte: 4, $lte: 62}}
      assertEquals: 1
    - type: count
      name: check_negative_binomial
      filter: {_id: negative_binomial, average: {$gte: 45, $lte: 55}, stddev: {$gte: 9, $lte: 11}}
      assertEquals: 1
    - type: count
      name: check_geometric
      filter: {_id: geometric, average: {$gte: 45, $lte: 55}, stddev: {$gte: 48, $lte: 52}}
      assertEquals: 1
    - type: count
      name: check_poisson
      filter: {_id: poisson, average: {$gte: 45, $lte: 55}, stddev: {$gte: 6.5, $lte: 7.6}}
      assertEquals: 1

      