# Example workload for doAll and join behavior. Executes two simple
# workloads in parallel. The child threads continue until they get to
# a join node. The parent thread waits at the join node until all of
# its children complete, but will not wait for backgroundNodes. When
# all the children nodes complete, the background nodes will be
# stopped and will end.

main : 
  seed: 131415161718
  name: main
  nodes: 
    - name : doAll
      type : doAll
      childNodes : 
        - thingA
        - thingB
      backgroundNodes : 
        - thingC
      next : join # Next state of the doAll should be a join.
    - name : join
      print : In Join
      type : join
      next : Finish
    - name : thingA
      print : Thing A running
      type : sleep
      next : join # Child thread continues until it gets to the join
      sleep : 1000
    - name : thingB
      print : Thing B running
      type : sleep
      next : join # Child thread continues until it gets to the join
      sleep : 1000
    - name : thingC
      type : insert_one
      doc : {x : a}
      next : thingC # Self loop. Will never end. 