SchemaVersion: 2018-07-01
Owner: "@mongodb/stm"

# This workload demonstrates all the current Document and Value Generators. It creates documents
# that look like this (simple)
# {
# 	"_id" : ObjectId("5fd2876c1a7e764b4c165fc8"),
# 	"type" : "simple",
# 	"int1" : NumberLong(19),
# 	"int2" : NumberLong(13),
# 	"int3" : NumberLong(4),
# 	"int4" : NumberLong(1859),
# 	"int5" : NumberLong(15),
# 	"int6" : NumberLong(95),
# 	"double" : 19.152527748379878,
# 	"string1" : "j3tEB",
# 	"string2" : "92DBC",
# 	"string3" : "tiAqAosBCF",
# 	"choose" : "A",
# 	"join" : "This is a joined string",
# 	"ip" : "19.81.37.180",
# 	"threadNum" : NumberLong(2),
# 	"threadString" : "2"
# }


# # And this (nested)
# {
# 	"_id" : ObjectId("5fd2876c1a7e764b4c165fc9"),
# 	"type" : "nested",
# 	"a" : "jzt8uZhMpDf2d",
# 	"b" : "aaaaaaaaaah+IStu9JiR",
# 	"c" : "da5scSf5-HJ7ohw44-U7sZR8Ra-uXnkbKjk",
# 	"task_id" : "test-hgfg54bMYD",
# 	"id_with_thread" : "ThreadID-2"
# }


Clients:
  Default:
    QueryOptions:
      maxPoolSize: 10
  SomeOtherPool:
    QueryOptions:
      maxPoolSize: 400

Actors:
- Name: Generator Examples
  Type: CrudActor
  Database: mydb
  Threads: 10
  ClientName: SomeOtherPool  # Which connection pool to use. Must be defined in Clients section.
  Phases:
  - Repeat: 10
    Collection: test
    Operations:
    - OperationName: bulkWrite
      OperationCommand:
        WriteOperations:
        - WriteCommand: insertOne  # Simple Generators
          Document:
            type: simple
            # Generate a random integer between 10 and 20. This uses the uniform distribution, which
            # is the default distribution. You must specify a min and max with the uniform
            # distribution.
            int1: {^RandomInt: {min: 10, max: 20}}
            int2: {^RandomInt: {min: 10, max: 20, distribution: uniform}}

            # Other supported distributions include:
            # Binomial with parameters t and p
            int3: {^RandomInt: {distribution: binomial, t: 100, p: 0.05}}
            # Negative Binomial with parameters k and p
            int4: {^RandomInt: {distribution: negative_binomial, k: 100, p: 0.05}}
            # Geometric distribution with parameter p
            int5: {^RandomInt: {distribution: geometric, p: 0.05}}
            # Poisson distribution with parameter mean
            int6: {^RandomInt: {distribution: poisson, mean: 100}}

            # Can generate random doubles as well. They are 64 bit numbers. Supported distributions
            # include: uniform, exponential, gamma, weibull, extreme_value, beta, laplace, normal,
            # lognormal, chi_squared, non_central_chi_squared, cauchy, fisher_f, and student_t. See
            # https://www.boost.org/doc/libs/1_66_0/doc/html/boost_random/reference.html#boost_random.reference.generators
            # for parameters. Uniform is used by default if no distribution is specified.
            double: {^RandomDouble: {min: 10, max: 20}}

            # Random String of length 5
            string1: {^RandomString: {length: 5}}
            # You can also specify a custom alhpabet for random strings
            string2: {^RandomString: {length: 5, alphabet: "0123456789ABCDEF"}}
            # FastRandomString is computationally faster, but the letters are not all equally
            # likely. It matches the string generational algorithm in YCSB.
            string3: {^FastRandomString: {length: 10}}

            # You can randomly choose objects. from is an array of values to pick from. Weigths is
            # optional and weights the probability of each option in the from array. If Weights is
            # ommitted, each entry has the same probability. The choices can be any valid generator
            # or json value.
            choose: {^Choose: {from: ["A", 12, {b: {c: d}}]}}

            # You can combine strings. Each string in array is combined, with sep in between. sep is
            # optional, and defaults to the empty string. See nested generators below for more
            # interesting examples.
            join: {^Join: {array: ["This", "is", "a", "joined", "string"], sep: " "}}


            # Generate a random IP Address. In the future this will support a netmask and prefix
            # options to narrow the range of IP addresses. Every IP address is equally likely.
            ip: {^IP: {}}

            # Generate the thread ID as a numbers. This will be constant for a given actor, but
            # unique across actors
            threadNum: {^ThreadID: {}}
            # Generate the thread ID as a string
            threadString: {^ThreadIDString: {}}

        - WriteCommand: insertOne  # Nested Generators
          # You can nest generators to make complex values.
          Document:
            type: nested
            # Random strings of a random length between 10 and 20.
            a: {^RandomString: {length: {^RandomInt: {min: 10, max: 20}}}}

            # Create a random string that is 50% compressible by using join. The first 10 characters
            # are all the same and compressible, while the remaining 10 are random.
            b: {^Join: {array: ["aaaaaaaaaa", {^RandomString: {length: 10}}]}}

            # Can Match common string formats
            c: {^Join: {array: [{^RandomString: {length: 8}},
                                {^RandomString: {length: 8}},
                                {^RandomString: {length: 8}},
                                {^RandomString: {length: 8}}],
                        sep: "-"}}

            # Or match different formats. Note that for ^Choose within a ^Join, all the entries in
            # the from sequence must generate strings. You cannot embed a number or a document.
            task_id: {^Join: {array: [{^Choose: {from: ["build", "test", "lint"]}},
                                      {^RandomString: {length: 10}}], sep: "-"}}

            id_with_thread: {^Join: {array: ["ThreadID-", {^ThreadIDString: {}}]}}

  - Repeat: 1
    Collection: test
    Operation:
      OperationName: drop
      OperationCommand:
        Options:
          WriteConcern:
            Level: majority
