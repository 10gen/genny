// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jasper.proto
#ifndef GRPC_jasper_2eproto__INCLUDED
#define GRPC_jasper_2eproto__INCLUDED

#include "jasper.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace jasper {

class JasperProcessManager final {
 public:
  static constexpr char const* service_full_name() {
    return "jasper.JasperProcessManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::jasper::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::jasper::ProcessInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>> AsyncCreate(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>> List(::grpc::ClientContext* context, const ::jasper::Filter& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>> AsyncList(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>> PrepareAsyncList(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>>(PrepareAsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>> Group(::grpc::ClientContext* context, const ::jasper::TagName& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>>(GroupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>> AsyncGroup(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>>(AsyncGroupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>> PrepareAsyncGroup(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>>(PrepareAsyncGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::ProcessInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>> AsyncGet(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>> PrepareAsyncGet(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Wait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncWait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncWaitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncWait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncWaitRaw(context, request, cq));
    }
    virtual ::grpc::Status Signal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncSignal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncSignalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncSignal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncSignalRaw(context, request, cq));
    }
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncClose(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncClose(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status TagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncTagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncTagProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncTagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncTagProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncResetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncResetTagsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::ProcessTags* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>> AsyncGetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>>(AsyncGetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>> PrepareAsyncGetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>>(PrepareAsyncGetTagsRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncDownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncDownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncDownloadFileAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncDownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncDownloadFileAsyncRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncDownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncDownloadMongoDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncDownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncDownloadMongoDBRaw(context, request, cq));
    }
    virtual ::grpc::Status ConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::jasper::OperationOutcome* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> AsyncConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(AsyncConfigureCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>> PrepareAsyncConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>>(PrepareAsyncConfigureCacheRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::BuildloggerURLs* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>> AsyncGetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>>(AsyncGetBuildloggerURLsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>> PrepareAsyncGetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>>(PrepareAsyncGetBuildloggerURLsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>* AsyncCreateRaw(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>* ListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>* AsyncListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::jasper::ProcessInfo>* GroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>* AsyncGroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jasper::ProcessInfo>* PrepareAsyncGroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>* AsyncGetRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessInfo>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncWaitRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncWaitRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncSignalRaw(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncSignalRaw(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncCloseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncTagProcessRaw(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncTagProcessRaw(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncResetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncResetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>* AsyncGetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::ProcessTags>* PrepareAsyncGetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncDownloadFileAsyncRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncDownloadFileAsyncRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncDownloadMongoDBRaw(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncDownloadMongoDBRaw(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* AsyncConfigureCacheRaw(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::OperationOutcome>* PrepareAsyncConfigureCacheRaw(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>* AsyncGetBuildloggerURLsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jasper::BuildloggerURLs>* PrepareAsyncGetBuildloggerURLsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::jasper::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::jasper::ProcessInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>> AsyncCreate(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::jasper::ProcessInfo>> List(::grpc::ClientContext* context, const ::jasper::Filter& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::jasper::ProcessInfo>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>> AsyncList(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>> PrepareAsyncList(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>>(PrepareAsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::jasper::ProcessInfo>> Group(::grpc::ClientContext* context, const ::jasper::TagName& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::jasper::ProcessInfo>>(GroupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>> AsyncGroup(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>>(AsyncGroupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>> PrepareAsyncGroup(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>>(PrepareAsyncGroupRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::ProcessInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>> AsyncGet(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>> PrepareAsyncGet(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Wait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncWait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncWaitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncWait(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncWaitRaw(context, request, cq));
    }
    ::grpc::Status Signal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncSignal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncSignalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncSignal(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncSignalRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncClose(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncClose(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    ::grpc::Status TagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncTagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncTagProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncTagProcess(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncTagProcessRaw(context, request, cq));
    }
    ::grpc::Status ResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncResetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncResetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncResetTagsRaw(context, request, cq));
    }
    ::grpc::Status GetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::ProcessTags* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>> AsyncGetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>>(AsyncGetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>> PrepareAsyncGetTags(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>>(PrepareAsyncGetTagsRaw(context, request, cq));
    }
    ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncDownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    ::grpc::Status DownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncDownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncDownloadFileAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncDownloadFileAsync(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncDownloadFileAsyncRaw(context, request, cq));
    }
    ::grpc::Status DownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncDownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncDownloadMongoDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncDownloadMongoDB(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncDownloadMongoDBRaw(context, request, cq));
    }
    ::grpc::Status ConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::jasper::OperationOutcome* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> AsyncConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(AsyncConfigureCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>> PrepareAsyncConfigureCache(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>>(PrepareAsyncConfigureCacheRaw(context, request, cq));
    }
    ::grpc::Status GetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::jasper::BuildloggerURLs* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>> AsyncGetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>>(AsyncGetBuildloggerURLsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>> PrepareAsyncGetBuildloggerURLs(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>>(PrepareAsyncGetBuildloggerURLsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>* AsyncCreateRaw(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::jasper::CreateOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::jasper::ProcessInfo>* ListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request) override;
    ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>* AsyncListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::jasper::Filter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::jasper::ProcessInfo>* GroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request) override;
    ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>* AsyncGroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::jasper::ProcessInfo>* PrepareAsyncGroupRaw(::grpc::ClientContext* context, const ::jasper::TagName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>* AsyncGetRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessInfo>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncWaitRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncWaitRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncSignalRaw(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncSignalRaw(::grpc::ClientContext* context, const ::jasper::SignalProcess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncCloseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncTagProcessRaw(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncTagProcessRaw(::grpc::ClientContext* context, const ::jasper::ProcessTags& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncResetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncResetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>* AsyncGetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::ProcessTags>* PrepareAsyncGetTagsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncDownloadFileAsyncRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncDownloadFileAsyncRaw(::grpc::ClientContext* context, const ::jasper::DownloadInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncDownloadMongoDBRaw(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncDownloadMongoDBRaw(::grpc::ClientContext* context, const ::jasper::MongoDBDownloadOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* AsyncConfigureCacheRaw(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::OperationOutcome>* PrepareAsyncConfigureCacheRaw(::grpc::ClientContext* context, const ::jasper::CacheOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>* AsyncGetBuildloggerURLsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jasper::BuildloggerURLs>* PrepareAsyncGetBuildloggerURLsRaw(::grpc::ClientContext* context, const ::jasper::JasperProcessID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Group_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Wait_;
    const ::grpc::internal::RpcMethod rpcmethod_Signal_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_TagProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetTags_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTags_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadFileAsync_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadMongoDB_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigureCache_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBuildloggerURLs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::StatusResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::jasper::CreateOptions* request, ::jasper::ProcessInfo* response);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::jasper::Filter* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer);
    virtual ::grpc::Status Group(::grpc::ServerContext* context, const ::jasper::TagName* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessInfo* response);
    virtual ::grpc::Status Wait(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status Signal(::grpc::ServerContext* context, const ::jasper::SignalProcess* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status TagProcess(::grpc::ServerContext* context, const ::jasper::ProcessTags* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status ResetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status GetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessTags* response);
    virtual ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status DownloadFileAsync(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status DownloadMongoDB(::grpc::ServerContext* context, const ::jasper::MongoDBDownloadOptions* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status ConfigureCache(::grpc::ServerContext* context, const ::jasper::CacheOptions* request, ::jasper::OperationOutcome* response);
    virtual ::grpc::Status GetBuildloggerURLs(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::BuildloggerURLs* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::jasper::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::jasper::CreateOptions* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::jasper::CreateOptions* request, ::grpc::ServerAsyncResponseWriter< ::jasper::ProcessInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::jasper::Filter* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::jasper::Filter* request, ::grpc::ServerAsyncWriter< ::jasper::ProcessInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Group : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Group() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Group() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Group(::grpc::ServerContext* context, const ::jasper::TagName* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGroup(::grpc::ServerContext* context, ::jasper::TagName* request, ::grpc::ServerAsyncWriter< ::jasper::ProcessInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::jasper::JasperProcessID* request, ::grpc::ServerAsyncResponseWriter< ::jasper::ProcessInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Wait() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Wait(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWait(::grpc::ServerContext* context, ::jasper::JasperProcessID* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Signal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Signal() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Signal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Signal(::grpc::ServerContext* context, const ::jasper::SignalProcess* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignal(::grpc::ServerContext* context, ::jasper::SignalProcess* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TagProcess() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TagProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagProcess(::grpc::ServerContext* context, const ::jasper::ProcessTags* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagProcess(::grpc::ServerContext* context, ::jasper::ProcessTags* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetTags() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ResetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetTags(::grpc::ServerContext* context, ::jasper::JasperProcessID* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTags() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessTags* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTags(::grpc::ServerContext* context, ::jasper::JasperProcessID* request, ::grpc::ServerAsyncResponseWriter< ::jasper::ProcessTags>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DownloadFile() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::jasper::DownloadInfo* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadFileAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DownloadFileAsync() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DownloadFileAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFileAsync(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFileAsync(::grpc::ServerContext* context, ::jasper::DownloadInfo* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadMongoDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DownloadMongoDB() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DownloadMongoDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMongoDB(::grpc::ServerContext* context, const ::jasper::MongoDBDownloadOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMongoDB(::grpc::ServerContext* context, ::jasper::MongoDBDownloadOptions* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConfigureCache() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ConfigureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCache(::grpc::ServerContext* context, const ::jasper::CacheOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCache(::grpc::ServerContext* context, ::jasper::CacheOptions* request, ::grpc::ServerAsyncResponseWriter< ::jasper::OperationOutcome>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBuildloggerURLs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBuildloggerURLs() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetBuildloggerURLs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBuildloggerURLs(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::BuildloggerURLs* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBuildloggerURLs(::grpc::ServerContext* context, ::jasper::JasperProcessID* request, ::grpc::ServerAsyncResponseWriter< ::jasper::BuildloggerURLs>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Status<WithAsyncMethod_Create<WithAsyncMethod_List<WithAsyncMethod_Group<WithAsyncMethod_Get<WithAsyncMethod_Wait<WithAsyncMethod_Signal<WithAsyncMethod_Close<WithAsyncMethod_TagProcess<WithAsyncMethod_ResetTags<WithAsyncMethod_GetTags<WithAsyncMethod_DownloadFile<WithAsyncMethod_DownloadFileAsync<WithAsyncMethod_DownloadMongoDB<WithAsyncMethod_ConfigureCache<WithAsyncMethod_GetBuildloggerURLs<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::jasper::CreateOptions* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::jasper::Filter* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Group : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Group() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Group() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Group(::grpc::ServerContext* context, const ::jasper::TagName* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Wait() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Wait(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Signal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Signal() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Signal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Signal(::grpc::ServerContext* context, const ::jasper::SignalProcess* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TagProcess() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TagProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagProcess(::grpc::ServerContext* context, const ::jasper::ProcessTags* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetTags() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ResetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTags() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessTags* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DownloadFile() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadFileAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DownloadFileAsync() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DownloadFileAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFileAsync(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadMongoDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DownloadMongoDB() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DownloadMongoDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMongoDB(::grpc::ServerContext* context, const ::jasper::MongoDBDownloadOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConfigureCache() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ConfigureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCache(::grpc::ServerContext* context, const ::jasper::CacheOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBuildloggerURLs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBuildloggerURLs() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetBuildloggerURLs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBuildloggerURLs(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::BuildloggerURLs* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::jasper::CreateOptions* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::jasper::Filter* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Group : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Group() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Group() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Group(::grpc::ServerContext* context, const ::jasper::TagName* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Wait() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Wait(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWait(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Signal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Signal() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Signal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Signal(::grpc::ServerContext* context, const ::jasper::SignalProcess* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TagProcess() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TagProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagProcess(::grpc::ServerContext* context, const ::jasper::ProcessTags* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetTags() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ResetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTags() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessTags* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadFileAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DownloadFileAsync() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DownloadFileAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFileAsync(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFileAsync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadMongoDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DownloadMongoDB() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DownloadMongoDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMongoDB(::grpc::ServerContext* context, const ::jasper::MongoDBDownloadOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMongoDB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ConfigureCache() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ConfigureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCache(::grpc::ServerContext* context, const ::jasper::CacheOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBuildloggerURLs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBuildloggerURLs() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetBuildloggerURLs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBuildloggerURLs(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::BuildloggerURLs* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBuildloggerURLs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::jasper::StatusResponse>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::jasper::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::CreateOptions, ::jasper::ProcessInfo>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::jasper::CreateOptions* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::CreateOptions,::jasper::ProcessInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::JasperProcessID, ::jasper::ProcessInfo>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::JasperProcessID,::jasper::ProcessInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Wait() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::JasperProcessID, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_Wait<BaseClass>::StreamedWait, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Wait(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWait(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::JasperProcessID,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Signal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Signal() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::SignalProcess, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_Signal<BaseClass>::StreamedSignal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Signal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Signal(::grpc::ServerContext* context, const ::jasper::SignalProcess* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::SignalProcess,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_Close<BaseClass>::StreamedClose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TagProcess() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::ProcessTags, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_TagProcess<BaseClass>::StreamedTagProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TagProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagProcess(::grpc::ServerContext* context, const ::jasper::ProcessTags* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::ProcessTags,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetTags() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::JasperProcessID, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_ResetTags<BaseClass>::StreamedResetTags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::JasperProcessID,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTags() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::JasperProcessID, ::jasper::ProcessTags>(std::bind(&WithStreamedUnaryMethod_GetTags<BaseClass>::StreamedGetTags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::ProcessTags* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::JasperProcessID,::jasper::ProcessTags>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DownloadFile() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::DownloadInfo, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_DownloadFile<BaseClass>::StreamedDownloadFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::DownloadInfo,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadFileAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DownloadFileAsync() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::DownloadInfo, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_DownloadFileAsync<BaseClass>::StreamedDownloadFileAsync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DownloadFileAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadFileAsync(::grpc::ServerContext* context, const ::jasper::DownloadInfo* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadFileAsync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::DownloadInfo,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadMongoDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DownloadMongoDB() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::MongoDBDownloadOptions, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_DownloadMongoDB<BaseClass>::StreamedDownloadMongoDB, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DownloadMongoDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadMongoDB(::grpc::ServerContext* context, const ::jasper::MongoDBDownloadOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadMongoDB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::MongoDBDownloadOptions,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ConfigureCache() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::CacheOptions, ::jasper::OperationOutcome>(std::bind(&WithStreamedUnaryMethod_ConfigureCache<BaseClass>::StreamedConfigureCache, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConfigureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigureCache(::grpc::ServerContext* context, const ::jasper::CacheOptions* request, ::jasper::OperationOutcome* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigureCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::CacheOptions,::jasper::OperationOutcome>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBuildloggerURLs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBuildloggerURLs() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::jasper::JasperProcessID, ::jasper::BuildloggerURLs>(std::bind(&WithStreamedUnaryMethod_GetBuildloggerURLs<BaseClass>::StreamedGetBuildloggerURLs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBuildloggerURLs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBuildloggerURLs(::grpc::ServerContext* context, const ::jasper::JasperProcessID* request, ::jasper::BuildloggerURLs* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBuildloggerURLs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jasper::JasperProcessID,::jasper::BuildloggerURLs>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Wait<WithStreamedUnaryMethod_Signal<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_TagProcess<WithStreamedUnaryMethod_ResetTags<WithStreamedUnaryMethod_GetTags<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_DownloadFileAsync<WithStreamedUnaryMethod_DownloadMongoDB<WithStreamedUnaryMethod_ConfigureCache<WithStreamedUnaryMethod_GetBuildloggerURLs<Service > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::jasper::Filter, ::jasper::ProcessInfo>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::jasper::Filter* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::jasper::Filter,::jasper::ProcessInfo>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Group : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Group() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::jasper::TagName, ::jasper::ProcessInfo>(std::bind(&WithSplitStreamingMethod_Group<BaseClass>::StreamedGroup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Group() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Group(::grpc::ServerContext* context, const ::jasper::TagName* request, ::grpc::ServerWriter< ::jasper::ProcessInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGroup(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::jasper::TagName,::jasper::ProcessInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<WithSplitStreamingMethod_Group<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Create<WithSplitStreamingMethod_List<WithSplitStreamingMethod_Group<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Wait<WithStreamedUnaryMethod_Signal<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_TagProcess<WithStreamedUnaryMethod_ResetTags<WithStreamedUnaryMethod_GetTags<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_DownloadFileAsync<WithStreamedUnaryMethod_DownloadMongoDB<WithStreamedUnaryMethod_ConfigureCache<WithStreamedUnaryMethod_GetBuildloggerURLs<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace jasper


#endif  // GRPC_jasper_2eproto__INCLUDED
