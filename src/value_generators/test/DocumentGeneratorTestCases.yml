---

Tests:

  # These tests use large numbers for number parameters
  # because short numbers get automatically narrowed to
  # int32s whereas number value-generators always produce
  # int64s.

  - Name: Must be mapping type
    GivenTemplate: a
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: null
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: [sequence, value]
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: []
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Simple scalar map
    GivenTemplate: {a: a}
    ThenReturns: [{a: a}, {a: a}]

  - Name: Two-key scalar map
    GivenTemplate: {a: 1, b: 2}
    ThenReturns: [{a: 1, b: 2}]

  - Name: Null scalar
    GivenTemplate: {a: null}
    ThenReturns: [{a: null}, {a: null}]

  - Name: Array without templates
    GivenTemplate: {vals: [sequence, value]}
    ThenReturns: [{vals: [sequence, value]}]

  - Name: Doubles
    GivenTemplate: {a: 3.0}
    ThenReturns: [{a: 3.0}]

  - Name: Empty arrays
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: Array of mixed-types without templates
    GivenTemplate: {a: ["foo", 2147483648]}
    ThenReturns: [{a: ["foo", 2147483648]}]

  - Name: Array of mixed-types without templates
    GivenTemplate:
      {a: [2147483648, 269849313357703264, 3.14, string, true, null]}
    ThenReturns:
      - {a: [2147483648, 269849313357703264, 3.14, string, true, null]}

  - Name: Empty array
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: one RandomInt
    GivenTemplate: {a: {^RandomInt: {min: 10000000000, max: 10000000010}}}
    ThenReturns: [{a: 10000000001}, {a: 10000000001}, {a: 10000000000}]

  - Name: two RandomInts in map
    GivenTemplate:
      a: {^RandomInt: {min: 10000000050, max: 10000000060}}
      b: {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: 10000000050, b: 10000000033}]

  - Name: RandomInt and literal
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - 10000000010
    ThenReturns: [{a: [10000000010, 10000000010, 10000000010]}]

  - Name: RandomInt recursively applied
    GivenTemplate:
      a:
        - ^RandomInt:
            min: 10000000020
            max: {^RandomInt: {min: 10000000020, max: 10000000020}}
        - ^RandomInt:
            min: {^RandomInt: {min: 10000000020, max: 10000000020}}
            max: 10000000020
        - 10000000020
    ThenReturns: [{a: [10000000020, 10000000020, 10000000020]}]

  - Name: two RandomInts in list
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000050, max: 10000000060}}
        - {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: [10000000059, 10000000038]}]

  - Name: Mixing ^ keys with other keys
    GivenTemplate: {a: {otherKey: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Mixing ^ other keys before
    GivenTemplate: {a: {extraKeyBefore: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Bare ^ at top-level
    GivenTemplate: {^RandomInt: {min: 50, max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Unknown expression-type
    GivenTemplate: {a: {^NonExistent: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: some kind of sub-args work fine
    GivenTemplate: {a: {min: 10000000050, max: 10000000060}}
    ThenReturns:
      - {a: {min: 10000000050, max: 10000000060}}
      - {a: {min: 10000000050, max: 10000000060}}

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: [], max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50, max: []}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: fifty, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: "7"}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: 7}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: []}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50.0, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing min
    GivenTemplate:
      a: {^RandomInt: {max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing max
    GivenTemplate:
      a: {^RandomInt: {min: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Explicit uniform distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: uniform
          min: 10000000050
          max: 10000000060
    ThenReturns:
      - {a: 10000000052}
      - {a: 10000000054}
      - {a: 10000000051}
      - {a: 10000000055}

  - Name: Explicit uniform distribution no min/max
    GivenTemplate:
      a: {^RandomInt: {distribution: uniform}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial Distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 1000000000100, p: 0.05}}
    ThenReturns:
      - {a: 49999867437}
      - {a: 50000021075}
      - {a: 50000257368}
      - {a: 50000088428}
      - {a: 49999660736}
      - {a: 50000250638}
      - {a: 50000141863}
      - {a: 50000213950}
      - {a: 50000002448}
      - {a: 49999881544}

  - Name: Binomial requires t and p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires int t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial Distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: negative_binomial
          k: 1000000000100
          p: 0.05
    ThenReturns:
      - {a: 19000032068750}
      - {a: 19000044165605}
      - {a: 19000000804896}
      - {a: 19000001700701}
      - {a: 19000013250407}
      - {a: 19000009467884}
      - {a: 18999995942719}
      - {a: 18999992778550}
      - {a: 19000025251188}
      - {a: 18999991803183}

  - Name: Negative Binomial requires k and p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires int k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Geometric distribution requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: geometric}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Poisson distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson, mean: 10000000000000}}
    ThenReturns:
      - {a: 9999997883716}
      - {a: 9999998585959}
      - {a: 9999994466398}
      - {a: 9999993316440}
      - {a: 9999998077294}
      - {a: 9999998932246}
      - {a: 10000005071779}
      - {a: 10000000476801}
      - {a: 10000002566643}
      - {a: 10000003586981}

  - Name: Poisson distribution requires mean
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: non_existent}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string
    GivenTemplate:
      a: {^RandomString: {length: 15}}
    ThenReturns:
      - {a: 0xYYXCh/YblEHcm}
      - {a: XZX/d40BxSQFMHj}
      - {a: Lkgi6+6zwnNkJy/}
      - {a: p7K4YyqevkPiYhG}
      - {a: 87QV1KsYVNJOo6a}

  - Name: Random string custom alphabet
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xyz}}
    ThenReturns:
      - {a: yzyzxxxzxxyyyyx}
      - {a: yxxyyzzxyyxzzxz}
      - {a: xzxyzzyyyyzyzzy}
      - {a: yzyyzxzxxyxxzzz}
      - {a: zxyzzzyxxxxzyzy}

  - Name: Random string custom alphabet can repeat chars
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xxx}}
    ThenReturns:
      - {a: xxxxxxxxxxxxxxx}
      - {a: xxxxxxxxxxxxxxx}

  - Name: Random string requires length
    GivenTemplate:
      a: {^RandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string requires non-empty alphabet if specified
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: ''}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string random length
    GivenTemplate:
      a:
        ^RandomString:
          length: {^RandomInt: {min: 2, max: 5}}
          alphabet: xyz
    ThenReturns:
      - {a: zzx}
      - {a: yzx}
      - {a: zy}

  - Name: FastRandom string
    GivenTemplate:
      a: {^FastRandomString: {length: 15}}
    ThenReturns:
      - {a: rqhjqANjNDtunHm}
      - {a: OpEkKLqLlDMPLMm}
      - {a: lloNJnuFmnNDAEt}
      - {a: MjOrDAIPLEMDsHt}
      - {a: LhMtJsrqKKOvlro}

  - Name: FastRandomString string requires length
    GivenTemplate:
      a: {^FastRandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FastRandomString random length
    GivenTemplate:
      a: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}
    ThenReturns:
      - {a: lD}
      - {a: kj}
      - {a: sgCO}

  - Name: Parameters blow up
    GivenTemplate:
      ^Parameter: {Default: Required, Name: Required}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Verbatim
    GivenTemplate:
      a: {^Verbatim: {^RandomInt: {min: 10000000050, max: 10000000060}}}
    ThenReturns:
      - a: {^RandomInt: {min: 10000000050, max: 10000000060}}

  - Name: Verbatim can break all the rules
    GivenTemplate:
      a:
        ^Verbatim:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}
    ThenReturns:
      - a:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}

  - Name: Verbatim as a list
    GivenTemplate:
      a:
        ^Verbatim:
          - ^RandomInt: {min: 10000000050, max: 10000000060}
          - ^RandomString: {length: 10000000015}
          - scalarValue
    ThenReturns:
    - a:
      - ^RandomInt: {min: 10000000050, max: 10000000060}
      - ^RandomString: {length: 10000000015}
      - scalarValue

  - Name: ChooseGenerator
    GivenTemplate:
      a: {^Choose: {from: [1, "abc", {a: 1}]}}
    ThenReturns:
    - a: abc
    - a: abc
    - a: {a: 1}
    - a: 1

  - Name: Join Generator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"]}}
    ThenReturns:
    - a: "Itworked"

  - Name: Join Generator with seperator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"], sep: " "}}
    ThenReturns:
    - a: "It worked"

  - Name: Join With Choose
    GivenTemplate:
      a: {^Join: {array: ["Hello",
                          "random",
                          "person:",
                          {^Choose: {from: ["Huey", "Duey",
                                            {^FastRandomString: {length: 10}}]}}], sep: " "}}
    ThenReturns:
    - a: "Hello random person: Duey"
    - a: "Hello random person: Duey"
    - a: "Hello random person: smlCLkHjFD"
    - a: "Hello random person: mnqojklKFs"
    - a: "Hello random person: nsvOnhPhIO"
    - a: "Hello random person: LJomLqKPrk"
    - a: "Hello random person: Huey"

  - Name: Double Generator
    GivenTemplate:
      a: {^RandomDouble: {min: 1.0, max: 20.0}}
      uniform: {^RandomDouble: {distribution: uniform, min: 1.0, max: 20.0}}
      exponential: {^RandomDouble: {distribution: exponential, lambda: 1.0}}
      gamma: {^RandomDouble: {distribution: gamma, alpha: 1.0, beta: 2.0}}
      weibull: {^RandomDouble: {distribution: weibull, a: 1.0, b: 2.0}}
      extremeValue: {^RandomDouble: {distribution: extreme_value, a: 1.0, b: 2.0}}
      beta: {^RandomDouble: {distribution: beta, alpha: 1.0}}
      laplace: {^RandomDouble: {distribution: laplace, mean: 10.1, beta: 2.1}}
      normal: {^RandomDouble: {distribution: normal, mean: 50, sigma: 10.0}}
      lognormal: {^RandomDouble: {distribution: lognormal, m: 1.0, s: 2.0}}
      chisquared: {^RandomDouble: {distribution: chi_squared, n: 10}}
      noncentralchi: {^RandomDouble: {distribution: non_central_chi_squared, k: 7, lambda: 2}}
      cauchy: {^RandomDouble: {distribution: cauchy, median: 17.2, sigma: 2.3}}
      fisherf: {^RandomDouble: {distribution: fisher_f, m: 12, n: 7}}
      studentt: {^RandomDouble: {distribution: student_t, n: 17}}
    ThenReturns:
    - a: {"$numberDouble": "3.1072252315940791512"}
      uniform: {"$numberDouble": "9.0324627976119451489"}
      "exponential": {"$numberDouble": "1.22877935746732736"}
      "gamma": {"$numberDouble": "0.30907777173004674642"}
      "weibull": {"$numberDouble": "2.7685758708440277864"}
      "extremeValue": {"$numberDouble": "1.4087551784675507172"}
      "beta": {"$numberDouble": "0.84499342631514873236"}
      "laplace": {"$numberDouble": "7.6225726487470284454"}
      "normal": {"$numberDouble": "33.219361880498198047"}
      "lognormal": {"$numberDouble": "5.2620928977596443943"}
      "chisquared": {"$numberDouble": "7.8762174520246670539"}
      "noncentralchi": {"$numberDouble": "6.6881922445921997422"}
      "cauchy": {"$numberDouble": "14.109054790966553128"}
      "fisherf": {"$numberDouble": "7.5724556054847980135"}
      "studentt": {"$numberDouble": "-0.051598503988862669256"}
    - "a": {"$numberDouble": "9.6319300658140161175"}
      "uniform": {"$numberDouble": "10.52535496767269585"}
      "exponential": {"$numberDouble": "1.9060004139882231744"}
      "gamma": {"$numberDouble": "3.7049777857971011308"}
      "weibull": {"$numberDouble": "0.79359489035688579595"}
      "extremeValue": {"$numberDouble": "-1.5165768490729787388"}
      "beta": {"$numberDouble": "0.30757815651654396572"}
      "laplace": {"$numberDouble": "12.314518418718506609"}
      "normal": {"$numberDouble": "38.646139529150403291"}
      "lognormal": {"$numberDouble": "90.294329902228028573"}
      "chisquared": {"$numberDouble": "15.860615919223810977"}
      "noncentralchi": {"$numberDouble": "9.8268965448150318309"}
      "cauchy": {"$numberDouble": "15.242090640429511339"}
      "fisherf": {"$numberDouble": "-12.590746037108534239"}
      "studentt": {"$numberDouble": "-0.74853901423911906043"}

  - Name: IP Generator
    GivenTemplate:
      a: {^IP: {}}
    ThenReturns:
    - a: "8.54.224.78"
    - a: "4.237.2.84"
    - a: "64.83.195.254"
    - a: "12.171.202.78"

  - Name: Actor ID
    GivenTemplate:
      string: {^ActorIdString: {}}
    ThenReturns:
    - "string": "2"

  - Name: Actor ID
    GivenTemplate:
      int: {^ActorId: {}}
    ThenReturns:
    - { "int" : { "$numberLong" : "2000000000"}, "string" : "2000000000" }

  # Now moves with time so would always fail until PERF-2086 is available.
  - Name: Now
    GivenTemplate:
      date: {^Now: {}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    # Check with linux command line `date --utc -d@$((1453689676330 / 1000.0))  +"%Y-%m-%dT%H:%M:%S.%3N"`
    - { "date" : { "$date" : { "$numberLong" : "1453689676330" } } }

  # Date: Half Open interval: ["2020-01-01", "2021-01-01").
  - Name: RandomDateMinMax
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    # Check with linux command line `date --utc -d@$((1606971090942 / 1000.0))  +"%Y-%m-%dT%H:%M:%S.%3N"`
    - { "date" : { "$date" : { "$numberLong" : "1606971090942" } } }

  # Date: Half Open interval: ["2020-01-01", "2030-01-01"). 2030-01-01 is the default max date.
  - Name: RandomDateMin
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1778468968160" } } }
    - { "date" : { "$date" : { "$numberLong" : "1871664110292" } } }

  # Date: Half Open interval: ["1970-01-01", "2021-01-01"). 1970-01-01 is the default min date.
  - Name: RandomDateMax
    GivenTemplate:
      date: {^RandomDate: {max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "183360228161" } } }

  # Date: 2020-01-01T00:00:00.000 (only one possible value here).
  - Name: RandomDateSingle
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2020-01-01T00:00:00.001"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Half Open interval: ["2020-01-01 00:00:00", "2020-06-01T12:00:00").
  - Name: RandomDateRange
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01 00:00:00", max: "2020-06-01T12:00:00"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1578819502267" } } }

  # Date: Half Open interval: ["1970-01-01", "2030-01-01").
  - Name: RandomDateFull
    GivenTemplate:
      date: {^RandomDate: {}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1454812640684" } } }

  # Date: Half Open interval: ["2030-01-01", "2040-01-01").
  - Name: RandomDateFuture
    GivenTemplate:
      date: {^RandomDate: {min: "2030-01-01", max: "2040-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1918332607011" } } }

  # Date: Half Open interval: ["2020-01-01", "2020-01-01").
  - Name: RandomDateULL
    GivenTemplate:
      date: {^RandomDate: {min: 1577836800000, max: 1577836800001}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Random Dates including tz offset.
  # Ensure that the generated value is correct '2013-05-30T00:57:04.299'.
  # Note the +05:30 (Asia/Kolkata) v +06:30 (with incremented hour in the datetime string).
  # As a result, the test fails if the TZ is not correctly processed (max will be less than min).
  - Name: RandomDateKolkata
    GivenTemplate:
      date: {^RandomDate: {min: "2013-05-30T07:27:04.299+06:30", max: "2013-05-30 06:27:04.300+05:30"}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  - Name: SimpleIncrement
    GivenTemplate:
      int: {^Inc: {start: 1, multiplier: 100, step: 1}}
    ThenReturns:
    - "int": { "$numberLong" : "201"}
    - "int": { "$numberLong" : "202"}
    - "int": { "$numberLong" : "203"}

  - Name: IncrementWithStep
    GivenTemplate:
      int: {^Inc: {start: 100, multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"500"}
    - "int" : { "$numberLong" :"502"}
    - "int" : { "$numberLong" :"504"}

  - Name: IncrementWithDefaultStart
    GivenTemplate:
      int: {^Inc: {multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"401"}
    - "int" : { "$numberLong" :"403"}
    - "int" : { "$numberLong" :"405"}

  - Name: IncrementAllDeafults
    GivenTemplate:
      int: {^Inc: {}}
    ThenReturns:
    - "int" : { "$numberLong" :"3"}
    - "int" : { "$numberLong" :"4"}
    - "int" : { "$numberLong" :"5"}
