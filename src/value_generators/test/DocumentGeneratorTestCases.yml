---

Tests:

  # These tests use large numbers for number parameters
  # because short numbers get automatically narrowed to
  # int32s whereas number value-generators always produce
  # int64s.

  - Name: Must be mapping type
    GivenTemplate: a
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: null
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: [sequence, value]
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: []
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Simple scalar map
    GivenTemplate: {a: a}
    ThenReturns: [{a: a}, {a: a}]

  - Name: Two-key scalar map
    GivenTemplate: {a: 1, b: 2}
    ThenReturns: [{a: 1, b: 2}]

  - Name: Null scalar
    GivenTemplate: {a: null}
    ThenReturns: [{a: null}, {a: null}]

  - Name: Array without templates
    GivenTemplate: {vals: [sequence, value]}
    ThenReturns: [{vals: [sequence, value]}]

  - Name: Doubles
    GivenTemplate: {a: 3.0}
    ThenReturns: [{a: 3.0}]

  - Name: Empty arrays
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: Array of mixed-types without templates
    GivenTemplate: {a: ["foo", 2147483648]}
    ThenReturns: [{a: ["foo", 2147483648]}]

  - Name: Array of mixed-types without templates
    GivenTemplate:
      {a: [2147483648, 269849313357703264, 3.14, string, true, null]}
    ThenReturns:
      - {a: [2147483648, 269849313357703264, 3.14, string, true, null]}

  - Name: Empty array
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: one RandomInt
    GivenTemplate: {a: {^RandomInt: {min: 10000000000, max: 10000000010}}}
    ThenReturns: [{a: 10000000001}, {a: 10000000001}, {a: 10000000000}]

  - Name: two RandomInts in map
    GivenTemplate:
      a: {^RandomInt: {min: 10000000050, max: 10000000060}}
      b: {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns:
    -  {a: 10000000051, b: 10000000031}
    -  {a: 10000000050, b: 10000000030}

  - Name: RandomInt and literal
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - 10000000010
    ThenReturns:
    - {a: [10000000010, 10000000010, 10000000010]}
    - {a: [10000000010, 10000000010, 10000000010]}
    - {a: [10000000010, 10000000010, 10000000010]}

  - Name: RandomInt recursively applied
    GivenTemplate:
      a:
        - ^RandomInt:
            min: 10000000020
            max: {^RandomInt: {min: 10000000020, max: 10000000020}}
        - ^RandomInt:
            min: {^RandomInt: {min: 10000000020, max: 10000000020}}
            max: 10000000020
        - 10000000020
    ThenReturns: [{a: [10000000020, 10000000020, 10000000020]}]

  - Name: two RandomInts in list
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000050, max: 10000000060}}
        - {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: [10000000051, 10000000031]}]

  - Name: Mixing ^ keys with other keys
    GivenTemplate: {a: {otherKey: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Mixing ^ other keys before
    GivenTemplate: {a: {extraKeyBefore: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Bare ^ at top-level
    GivenTemplate: {^RandomInt: {min: 50, max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Unknown expression-type
    GivenTemplate: {a: {^NonExistent: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: some kind of sub-args work fine
    GivenTemplate: {a: {min: 10000000050, max: 10000000060}}
    ThenReturns:
      - {a: {min: 10000000050, max: 10000000060}}
      - {a: {min: 10000000050, max: 10000000060}}

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: [], max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50, max: []}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: fifty, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: "7"}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: 7}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: []}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50.0, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing min
    GivenTemplate:
      a: {^RandomInt: {max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing max
    GivenTemplate:
      a: {^RandomInt: {min: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Explicit uniform distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: uniform
          min: 10000000050
          max: 10000000060
    ThenReturns:
      - {a: 10000000051}
      - {a: 10000000051}
      - {a: 10000000050}
      - {a: 10000000050}

  - Name: Explicit uniform distribution no min/max
    GivenTemplate:
      a: {^RandomInt: {distribution: uniform}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial Distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 1000000000100, p: 0.05}}
    ThenReturns:
      - {a: 49999826145}
      - {a: 49999781149}
      - {a: 49999658202}
      - {a: 49999742557}
      - {a: 49999965269}
      - {a: 49999907378}
      - {a: 50000002150}
      - {a: 49999810834}
      - {a: 50000057754}
      - {a: 49999867437}

  - Name: Binomial requires t and p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires int t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial Distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: negative_binomial
          k: 1000000000100
          p: 0.05
    ThenReturns:
      - {a: 19000007423599}
      - {a: 19000004398697}
      - {a: 19000014023172}
      - {a: 18999993317885}
      - {a: 18999998293903}
      - {a: 18999984525288}
      - {a: 18999991814976}
      - {a: 18999999857658}
      - {a: 19000040152791}
      - {a: 19000006530453}

  - Name: Negative Binomial requires k and p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires int k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Geometric distribution requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: geometric}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Poisson distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson, mean: 10000000000000}}
    ThenReturns:
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999995032424}
      - {a: 9999996252254}
      - {a: 9999999467960}
      - {a: 9999998633266}
      - {a: 9999999999435}
      - {a: 9999997239501}
      - {a: 10000000798072}
      - {a: 9999998056959}

  - Name: Poisson distribution requires mean
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: non_existent}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string
    GivenTemplate:
      a: {^RandomString: {length: 15}}
    ThenReturns:
      - {a: JGBEV0zQZIeNbth}
      - {a: BtmrZOdzj7TUCi+}
      - {a: SD6jA6Y+bpkmFT2}
      - {a: CuKVCAFFXQ8ULbz}
      - {a: Naqsr/zBMQAzUNS}

  - Name: Random string custom alphabet
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xyz}}
    ThenReturns:
      - {a: xxxxyzzxyxyxyzy}
      - {a: xzyzyxyzyzxxxyz}
      - {a: xxzyxzyzyyyyxxz}
      - {a: xzxyxxxxyxzxxyz}
      - {a: xyyzzzzxxxxzxxx}

  - Name: Random string custom alphabet can repeat chars
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xxx}}
    ThenReturns:
      - {a: xxxxxxxxxxxxxxx}
      - {a: xxxxxxxxxxxxxxx}

  - Name: Random string requires length
    GivenTemplate:
      a: {^RandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string requires non-empty alphabet if specified
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: ''}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string random length
    GivenTemplate:
      a:
        ^RandomString:
          length: {^RandomInt: {min: 2, max: 5}}
          alphabet: xyz
    ThenReturns:
      - {a: xx}
      - {a: yz}
      - {a: xyxyx}

  - Name: FastRandom string
    GivenTemplate:
      a: {^FastRandomString: {length: 15}}
    ThenReturns:
      - {a: mLkBOvIlHPqgpGD}
      - {a: sMgCKpOisGktHGv}
      - {a: PgJpKoCitPJJPOO}
      - {a: IqrjrvuHkmJFogN}
      - {a: GOHhGiGHLIkLhAq}

  - Name: FastRandomString string requires length
    GivenTemplate:
      a: {^FastRandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FastRandomString random length
    GivenTemplate:
      a: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}
    ThenReturns:
      - {a: qg}
      - {a: kt}
      - {a: JJP}

  - Name: Parameters blow up
    GivenTemplate:
      ^Parameter: {Default: Required, Name: Required}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Verbatim
    GivenTemplate:
      a: {^Verbatim: {^RandomInt: {min: 10000000050, max: 10000000060}}}
    ThenReturns:
      - a: {^RandomInt: {min: 10000000050, max: 10000000060}}

  - Name: Verbatim can break all the rules
    GivenTemplate:
      a:
        ^Verbatim:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}
    ThenReturns:
      - a:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}

  - Name: Verbatim as a list
    GivenTemplate:
      a:
        ^Verbatim:
          - ^RandomInt: {min: 10000000050, max: 10000000060}
          - ^RandomString: {length: 10000000015}
          - scalarValue
    ThenReturns:
    - a:
      - ^RandomInt: {min: 10000000050, max: 10000000060}
      - ^RandomString: {length: 10000000015}
      - scalarValue

  - Name: ChooseGenerator
    GivenTemplate:
      a: {^Choose: {from: [1, "abc", {a: 1}]}}
    ThenReturns:
    - a: 1
    - a: 1
    - a: abc
    - a: {a: 1}

  - Name: Join Generator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"]}}
    ThenReturns:
    - a: "Itworked"

  - Name: Join Generator with seperator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"], sep: " "}}
    ThenReturns:
    - a: "It worked"

  - Name: Join With Choose
    GivenTemplate:
      a: {^Join: {array: ["Hello",
                          "random",
                          "person:",
                          {^Choose: {from: ["Huey", "Duey",
                                            {^FastRandomString: {length: 10}}]}}], sep: " "}}
    ThenReturns:
    - a: "Hello random person: Huey"
    - a: "Hello random person: Huey"
    - a: "Hello random person: Duey"
    - a: "Hello random person: GOHhGiGHLI"
    - a: "Hello random person: Huey"
    - a: "Hello random person: Huey"
    - a: "Hello random person: IonKmglImH"

  - Name: Double Generator
    GivenTemplate:
      a: {^RandomDouble: {min: 1.0, max: 20.0}}
      uniform: {^RandomDouble: {distribution: uniform, min: 1.0, max: 20.0}}
      exponential: {^RandomDouble: {distribution: exponential, lambda: 1.0}}
      gamma: {^RandomDouble: {distribution: gamma, alpha: 1.0, beta: 2.0}}
      weibull: {^RandomDouble: {distribution: weibull, a: 1.0, b: 2.0}}
      extremeValue: {^RandomDouble: {distribution: extreme_value, a: 1.0, b: 2.0}}
      beta: {^RandomDouble: {distribution: beta, alpha: 1.0}}
      laplace: {^RandomDouble: {distribution: laplace, mean: 10.1, beta: 2.1}}
      normal: {^RandomDouble: {distribution: normal, mean: 50, sigma: 10.0}}
      lognormal: {^RandomDouble: {distribution: lognormal, m: 1.0, s: 2.0}}
      chisquared: {^RandomDouble: {distribution: chi_squared, n: 10}}
      noncentralchi: {^RandomDouble: {distribution: non_central_chi_squared, k: 7, lambda: 2}}
      cauchy: {^RandomDouble: {distribution: cauchy, median: 17.2, sigma: 2.3}}
# The fisherf distribution gives different results on different platforms.
#      fisherf: {^RandomDouble: {distribution: fisher_f, m: 12, n: 7}}
      studentt: {^RandomDouble: {distribution: student_t, n: 17}}
    ThenReturns:
    -  "a" : { "$numberDouble" : "3.952394090941460103" }
       "uniform" : { "$numberDouble" : "3.0360695791166998347" }
       "exponential" : { "$numberDouble" : "0.070786395988993736084" }
       "gamma" : { "$numberDouble" : "0.2668568736212015291" }
       "weibull" : { "$numberDouble" : "0.84158009772916297919" }
       "extremeValue" : { "$numberDouble" : "4.3175047395265959693" }
       "beta" : { "$numberDouble" : "0.65807401245179697469" }
       "laplace" : { "$numberDouble" : "8.7629362545759938996" }
       "normal" : { "$numberDouble" : "56.862224120853824161" }
       "lognormal" : { "$numberDouble" : "3.3101941543832040793" }
       "chisquared" : { "$numberDouble" : "8.4397336386305426004" }
       "noncentralchi" : { "$numberDouble" : "3.4312021039705653536" }
       "cauchy" : { "$numberDouble" : "15.807845411145144965" }
#       "fisherf" : { "$numberDouble" : "-36.841317455674790438" }
       "studentt" : { "$numberDouble" : "0.038230102370708597681" }
    - "a": { "$numberDouble": "2.1100850020004755514" }
      "uniform": { "$numberDouble": "18.226218200947592152" }
      "exponential": { "$numberDouble": "1.2947931222199158263" }
      "gamma": { "$numberDouble": "0.017365531057170525281" }
      "weibull": { "$numberDouble": "4.947093458225713114" }
      "extremeValue": { "$numberDouble": "1.0868433795224208271" }
      "beta": { "$numberDouble": "0.84348981160519898026" }
      "laplace": { "$numberDouble": "11.771741995342829057" }
      "normal": { "$numberDouble": "56.187440660465746589" }
      "lognormal": { "$numberDouble": "2.047961210280694111" }
      "chisquared": { "$numberDouble": "8.6938536441653102571" }
      "noncentralchi": { "$numberDouble": "13.356763702336033717" }
      "cauchy": { "$numberDouble": "-55.362133778926803984" }
#      "fisherf": { "$numberDouble": "-14.948314077879224726" }
      "studentt": { "$numberDouble": "-0.14294359511856821743" }

  - Name: IP Generator
    GivenTemplate:
      a: {^IP: {}}
    ThenReturns:
    - a: "19.227.202.197"
    - a: "13.183.120.74"
    - a: "2.214.68.247"
    - a: "9.91.11.22"

  - Name: Actor ID
    GivenTemplate:
      string: {^ActorIdString: {}}
    ThenReturns:
    - "string": "2"

  - Name: Actor ID
    GivenTemplate:
      int: {^ActorId: {}}
    ThenReturns:
    - { "int" : { "$numberLong" : "2000000000"}}

  # Now moves with time so would always fail until PERF-2086 is available.
#  - Name: Now
#    GivenTemplate:
#      date: {^Now: {}}
#    ThenReturns:
#    # The $date notation is extended json
#    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
#    # Check with linux command line `date --utc -d@$((1453689676330 / 1000.0))  +"%Y-%m-%dT%H:%M:%S.%3N"`
#    - { "date" : { "$date" : { "$numberLong" : "1453689676330" } } }

  # Date: Half Open interval: ["2020-01-01", "2021-01-01").
  - Name: RandomDateMinMax
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    # Check with linux command line `date --utc -d@$((1606971090942 / 1000.0))  +"%Y-%m-%dT%H:%M:%S.%3N"`
    - { "date" : { "$date" : { "$numberLong" : "1582750578258" } } }

  # Date: Half Open interval: ["2020-01-01", "2030-01-01"). 2030-01-01 is the default max date.
  - Name: RandomDateMin
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1626880603851" } } }
    - { "date" : { "$date" : { "$numberLong" : "1611659045266" } } }

  # Date: Half Open interval: ["1970-01-01", "2021-01-01"). 1970-01-01 is the default min date.
  - Name: RandomDateMax
    GivenTemplate:
      date: {^RandomDate: {max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "250092537631" } } }

  # Date: 2020-01-01T00:00:00.000 (only one possible value here).
  - Name: RandomDateSingle
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2020-01-01T00:00:00.001"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Half Open interval: ["2020-01-01 00:00:00", "2020-06-01T12:00:00").
  - Name: RandomDateRange
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01 00:00:00", max: "2020-06-01T12:00:00"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1579884207608" } } }

  # Date: Half Open interval: ["1970-01-01", "2030-01-01").
  - Name: RandomDateFull
    GivenTemplate:
      date: {^RandomDate: {}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "294222555545" } } }

  # Date: Half Open interval: ["2030-01-01", "2040-01-01").
  - Name: RandomDateFuture
    GivenTemplate:
      date: {^RandomDate: {min: "2030-01-01", max: "2040-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1942486378134" } } }

  # Date: Half Open interval: ["2020-01-01", "2020-01-01").
  - Name: RandomDateULL
    GivenTemplate:
      date: {^RandomDate: {min: 1577836800000, max: 1577836800001}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Random Dates including tz offset.
  # Ensure that the generated value is correct '2013-05-30T00:57:04.299'.
  # Note the +05:30 (Asia/Kolkata) v +06:30 (with incremented hour in the datetime string).
  # As a result, the test fails if the TZ is not correctly processed (max will be less than min).
  - Name: RandomDateKolkata
    GivenTemplate:
      date: {^RandomDate: {min: "2013-05-30T07:27:04.299+06:30", max: "2013-05-30 06:27:04.300+05:30"}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  - Name: SimpleIncrement
    GivenTemplate:
      int: {^Inc: {start: 1, multiplier: 100, step: 1}}
    ThenReturns:
    - "int": { "$numberLong" : "201"}
    - "int": { "$numberLong" : "202"}
    - "int": { "$numberLong" : "203"}

  - Name: IncrementWithStep
    GivenTemplate:
      int: {^Inc: {start: 100, multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"500"}
    - "int" : { "$numberLong" :"502"}
    - "int" : { "$numberLong" :"504"}

  - Name: IncrementWithDefaultStart
    GivenTemplate:
      int: {^Inc: {multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"401"}
    - "int" : { "$numberLong" :"403"}
    - "int" : { "$numberLong" :"405"}

  - Name: IncrementAllDeafults
    GivenTemplate:
      int: {^Inc: {}}
    ThenReturns:
    - "int" : { "$numberLong" :"3"}
    - "int" : { "$numberLong" :"4"}
    - "int" : { "$numberLong" :"5"}
