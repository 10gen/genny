#                        üßû    Genny   üßû‚Äç‚ôÄÔ∏è
#
# This file defines how this project is built by evergreen at
#
#   https://evergreen.mongodb.com/waterfall/genny
#
# 1. Indent using 2 spaces. Structures start on indents (e.g. dashes aren't
#    indented). Don't quote unnecessarily.
#
# 2.  Use `f_` prefix for function names and `t_` prefix for task names.
#
#     This allows
#
#     1.  grep for all usage of a function/task without colliding with
#         inline shell etc.
#     2.  grep for definition of a function `FOO` by grepping for `f_FOO:`
#         (with a colon)
#
# 3.  Put comments in yaml not in inline shell.
#
# 4.  Keep yaml anchors/aliases to a minimum and always prefix with `a_`
#     for similar grep-ability. Favor functions and tasks with
#     dependencies.
#
# 5.  Always use functions for all task-bodies and pre/post-bodies rather
#     than inlines. This keeps the overall logic separate from the
#     implementation.
#
# 6.  Maintain one blank line between each unit (each function, task,
#     variant etc). Two lines between each section.
#
# 7.  Don't change the order of the sections. Goal is to start with "entry
#     points" (variants) and then define children in breadth-first order.
#
# 8.  Functions that are non-obvious must have a comment with the existing
#     comment style.
#
# 9.  Any function that requires parameters or `${}`-style expansions must
#     document those parameters appropriately such that callers don't need
#     to read the function definition to figure out what they mean.
#
#                                                                       üßû‚Äç‚ôÄÔ∏è


##                ‚ö°Ô∏è Variants ‚ö°Ô∏è

buildvariants:

- name: archlinux
  display_name: Arch Linux
  modules: ~
  run_on:
  - archlinux-test
  expansions:
    cmake_cxx_flags: -pthread
  tasks:
  - name: t_test

# TODO: TIG-1056 the OS X image doesn't have a recent CMake or C++ compiler
# - name: macos-1012
#   display_name: OS X Sierra
#   modules: ~
#   run_on:
#   - macos-1012
#   expansions:
#     cmake_cxx_flags: ""
#   tasks:
#   - name: t_test


##                ‚ö°Ô∏è Tasks ‚ö°Ô∏è

tasks:
- name: t_compile
  commands:
  - func: f_fetch_source
  - func: f_build_grpc
  - func: f_compile
- name: t_python_test
  depends_on:
  - name: t_compile
  commands:
  - func: f_python_test
- name: t_cmake_test
  depends_on:
  -name: t_compile
  commands:
  - func: f_cmake_test


##                ‚ö°Ô∏è Task Groups ‚ö°Ô∏è

task_groups:
- name: t_test
  max_hosts: 1
  setup_group:
  - func: f_cleanup
  teardown_task:
  # Attaching results is prohibited in "teardown_group". So we call it for each task but make the
  # result file optional.
  - func: f_report_test_results
  tasks:
  - t_compile
  - t_python_test
  - t_cmake_test


##                ‚ö°Ô∏è Functions ‚ö°Ô∏è

functions:

  ##
  # Remove any remnants of past builds.
  ##
  f_cleanup:
  - command: shell.exec
    params:
      # the || true prevents a failure exit code for when `src` doesn't exist
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        rm -rf src || true

  f_fetch_source:
  - command: git.get_project
    params:
      directory: src

  ##
  # Compile gRPC. This script should be synchronized with DSI's compilation sript for Genny:
  # https://github.com/10gen/dsi/blob/master/configurations/workload_setup/workload_setup.common.yml
  # (URL valid as of 11/2018)
  ##
  f_build_grpc:
  - command: shell.exec
    params:
      working_dir: src/build
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        rm -rf grpc # remove if already exists
        git clone --recurse-submodules https://github.com/grpc/grpc.git

        pushd grpc
        git checkout b79462f186cc22550bc8d53a00ae751f50d194f5

        # Work around https://github.com/grpc/grpc/issues/16675 by checking out a newer commit.
        pushd third_party/boringssl
        git checkout 9edbc7ff9f56dff801a49f5ecb15ee06718b995c
        popd

        mkdir cmake-build
        pushd cmake-build
        cmake ..
        make

  ##
  # Compile the project in src/build.
  #
  # Expansions:
  #  cmake_cxx_flags: sent to cmake as `-DCMAKE_CXX_FLAGS`
  ###
  f_compile:
  - command: shell.exec
    params:
      working_dir: src/build
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        # Add paths to gRPC and protobuf.
        cwd=$(pwd)
        export LIBRARY_PATH="$cwd/grpc/cmake-build/:$cwd/grpc/cmake-build/third_party/protobuf"
        export CPLUS_INCLUDE_PATH="$cwd/grpc/include:$cwd/grpc/third_party/protobuf/src"

        cmake -DCMAKE_CXX_FLAGS="${cmake_cxx_flags}" ..
        make

  ##
  # Runs tests via `make test`.
  # Requires f_compile to have been run first.
  ##
  f_cmake_test:
  - command: shell.exec
    params:
      working_dir: src/build
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        make test

  ##
  # Runs python nosetests.
  ##
  f_python_test:
  - command: shell.exec
    params:
      working_dir: src/src/python
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        python setup.py nosetests

  ##
  # Reports test results to evergreen API.
  ##
  f_report_test_results:
  - command: attach.xunit_results
    params:
      optional: true
      file: ./src/build/src/*/*.junit.xml
  - command: attach.xunit_results
    params:
      optional: true
      file: ./src/src/python/nosetests.xml
