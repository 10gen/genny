#                        üßû    Genny   üßû‚Äç‚ôÄÔ∏è
#
# This file defines how this project is built by evergreen at
#
#   https://evergreen.mongodb.com/waterfall/genny
#
# 1. Indent using 2 spaces. Structures start on indents (e.g. dashes aren't
#    indented). Don't quote unnecessarily.
#
# 2.  Use `f_` prefix for function names and `t_` prefix for task names.
#
#     This allows
#
#     1.  grep for all usage of a function/task without colliding with
#         inline shell etc.
#     2.  grep for definition of a function `FOO` by grepping for `f_FOO:`
#         (with a colon)
#
# 3.  Put comments in yaml not in inline shell.
#
# 4.  Keep yaml anchors/aliases to a minimum and always prefix with `a_`
#     for similar grep-ability. Favor functions and tasks with
#     dependencies.
#
# 5.  Always use functions for all task-bodies and pre/post-bodies rather
#     than inlines. This keeps the overall logic separate from the
#     implementation.
#
# 6.  Maintain one blank line between each unit (each function, task,
#     variant etc). Two lines between each section.
#
# 7.  Don't change the order of the sections. Goal is to start with "entry
#     points" (variants) and then define children in breadth-first order.
#
# 8.  Functions that are non-obvious must have a comment with the existing
#     comment style.
#
# 9.  Any function that requires parameters or `${}`-style expansions must
#     document those parameters appropriately such that callers don't need
#     to read the function definition to figure out what they mean.
#
#                                                                       üßû‚Äç‚ôÄÔ∏è


##                ‚ö°Ô∏è Variants ‚ö°Ô∏è

ignore:
    - "*.md" # don't schedule tests if a commit only changes markdown files

buildvariants:

- name: archlinux
  display_name: Arch Linux
  modules: ~
  run_on:
  - archlinux-test
  expansions:
    grpc_revision: bcbd299aad62fd5dcd348fdab01adc43c3649e25
  tasks:
  - name: t_test
  - name: t_grpc

# TODO: TIG-1314 Amazon Linux 2 needs a newer boost
# - name: amazon2
#   display_name: Amazon Linux 2
#   modules: ~
#   run_on:
#   - amazon2-build
#   expansions:
#     cmake: "/opt/cmake/bin/cmake"
#  tasks:
#  - name: t_grpc

# TODO: TIG-1056 the OS X image doesn't have a recent CMake or C++ compiler
# - name: macos-1012
#   display_name: OS X Sierra
#   modules: ~
#   run_on:
#   - macos-1012
#   expansions:
#     cmake_cxx_flags: ""
#   tasks:
#   - name: t_test


##                ‚ö°Ô∏è Tasks ‚ö°Ô∏è

tasks:
- name: t_compile
  commands:
  - func: f_fetch_source
  - func: f_fetch_grpc
  - func: f_compile
  - func: f_checkout_mongodb

- name: t_python_test
  commands:
  - func: f_python_test

- name: t_cmake_test
  commands:
  - func: f_cmake_test

- name: t_grpc
  patch_only: yes
  commands:
  - func: f_fetch_source
  - func: f_build_grpc
  - func: f_push_grpc

- name: t_integration_test_standalone
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_standalone.yml

- name: t_integration_test_single_node_replset
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_single_node_replset.yml

- name: t_integration_test_three_node_replset
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_three_node_replset.yml

- name: t_integration_test_sharded
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_sharded.yml


##                ‚ö°Ô∏è Task Groups ‚ö°Ô∏è

task_groups:
- name: t_test
  max_hosts: 1
  setup_task:
  - func: f_remove_test_results_files
  teardown_task:
  # Attaching results is prohibited in "teardown_group". So we call it in "teardown_task"
  # but make the result file optional.
  - func: f_report_test_results
  - func: f_remove_test_results_files
  tasks:
  # Rely on implicit dependencies in task_groups where tasks are executed in the order they're
  # defined. Tasks with explicit "depends_on" tasks may conflict with task_group's implicit
  # dependency, causing unexpected behavior.
  #
  # For this task group, the implicit dependency is that t_*_test has to run after t_compile.
  - t_compile
  - t_python_test
  - t_cmake_test
  - t_integration_test_standalone
  - t_integration_test_single_node_replset
  - t_integration_test_three_node_replset
  - t_integration_test_sharded


##                ‚ö°Ô∏è Functions ‚ö°Ô∏è

functions:

  f_fetch_source:
  - command: git.get_project
    params:
      directory: src

  ##
  # Download the mongodb binary and then clone and checkout the appropriate mongodb repository branch
  # that contains the intended gennylib test case (SERVER-38646). Also installs resmoke dependencies.
  ##
  f_checkout_mongodb:
  - command: shell.exec
    params:
      working_dir: src/build
      script: |
        yes | pacman -S mongodb
        git clone git@github.com:mongodb/mongo.git mongo

        pushd mongo
          git checkout 6734c12d17dd4c0e2738a47feb7114221d6ba66d
        popd

        virtualenv -p python2 venv
        source venv/bin/activate
        python -m pip install -r mongo/etc/pip/evgtest-requirements.txt

  ##
  # Compile gRPC. This script should be synchronized with DSI's compilation sript for Genny:
  # https://github.com/10gen/dsi/blob/master/configurations/workload_setup/workload_setup.common.yml
  # (URL valid as of 11/2018)
  ##
  f_build_grpc:
  - command: subprocess.exec
    params:
      working_dir: src
      command: /bin/bash ${workdir}/src/scripts/make-grpc.sh
      env:
          MAKEFLAGS: "-j8" # This should be reasonably safe even on low memory machines
          CMAKE: "${cmake|cmake}"
          CMAKE_ARGS: "-DGENNY_INSTALL_DIR=${workdir}/grpc -DOPENSSL_USE_STATIC_LIBS=ON"

  f_push_grpc:
  - command: archive.targz_pack
    params:
      source_dir: grpc
      target: grpc.tgz
      include:
      - "./**"
  - command: shell.exec
    params:
      working_dir: .
      script: |
        set -o errexit

        # Make sure we have a file, give more info
        stat grpc.tgz
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: grpc.tgz
      remote_file: ${project}/grpc/grpc-${build_variant}-${revision}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: gRPC

  f_fetch_grpc:
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: grpc.tgz
      remote_file: ${project}/grpc/grpc-${build_variant}-${grpc_revision}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
  - command: archive.targz_extract
    params:
      path: grpc.tgz
      destination: ${workdir}/dist

  ##
  # Compile the project in src/build.
  #
  # Expansions:
  #  cmake_cxx_flags: sent to cmake as `-DCMAKE_CXX_FLAGS`
  ###
  f_compile:
  - command: shell.exec
    params:
      working_dir: src/build
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        "${cmake|cmake}" "${workdir}/src" \
            -DCMAKE_CXX_FLAGS="${cmake_cxx_flags}" \
            -DGENNY_INSTALL_DIR="${workdir}/dist"
        make -j$(nproc)

  ##
  # Runs tests via ctest.
  # Requires f_compile to have been run first.
  ##
  f_cmake_test:
  - command: shell.exec
    params:
      continue_on_err: true
      working_dir: src/build
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        ctest --label-exclude "(standalone|sharded|single_node_replset|three_node_replset)"

  ##
  # Runs tests via resmoke.
  # Requires f_compile to have been run first.
  ##
  f_resmoke_test:
  - command: shell.exec
    params:
      continue_on_err: true
      working_dir: src
      script: |
        set -o errexit
        set -o pipefail
        # set -o nounset # the "activate" script has an unbound variable

        source build/venv/bin/activate

        # We rely on catch2 to report test failures, but it doesn't always do so.
        # See https://github.com/catchorg/Catch2/issues/1210
        # As a workaround, we generate a dummy report with a failed test that is deleted if resmoke
        # succeeds.

        cat << EOF >> "build/sentinel.junit.xml"
        <?xml version="1.0" encoding="UTF-8"?>
        <testsuites>
         <testsuite name="resmoke_failure_sentinel" errors="0" failures="1" tests="1" hostname="tbd" time="1.0" timestamp="2019-01-01T00:00:00Z">
          <testcase classname="resmoke_failure_sentinel" name="Dummy testcase to signal that resmoke failed because a report may not be generated" time="1.0">
           <failure message="resmoke did not exit cleanly, see task log for detail" type="">
           </failure>
          </testcase>
          <system-out/>
          <system-err/>
         </testsuite>
        </testsuites>
        EOF

        # The tests themselves do the reporting instead of using resmoke.
        python build/mongo/buildscripts/resmoke.py \
               --suite src/resmokeconfig/${resmoke_suite} \
               --mongod mongod \
               --mongo mongo \
               --mongos mongos

        # Remove the sentinel report if resmoke succeeds. This line won't be executed if
        # resmoke fails because we've set errexit on this shell.
        rm build/sentinel.junit.xml

  ##
  # Runs python nosetests.
  ##
  f_python_test:
  - command: shell.exec
    params:
      continue_on_err: true
      working_dir: src/src/python
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        python setup.py nosetests

  ##
  # Reports test results to evergreen API. If you add a new file to this list, then you should also
  # add it to the `f_remove_test_results_files` function to ensure it is cleaned up between tasks in
  # the task group.
  ##
  f_report_test_results:
  - command: attach.xunit_results
    params:
      optional: true
      file: src/build/src/*/*.junit.xml
  - command: attach.xunit_results
    params:
      optional: true
      file: src/build/*.junit.xml
  - command: attach.xunit_results
    params:
      optional: true
      file: src/src/python/nosetests.xml

  ##
  # Removes the test results files from the local filesystem.
  ##
  f_remove_test_results_files:
  - command: shell.exec
    params:
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        rm -f \
        src/build/*.junit.xml \
        src/build/src/*/*.junit.xml \
        src/src/python/nosetests.xml
